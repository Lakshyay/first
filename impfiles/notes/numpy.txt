Problem Statement:
Given two NumPy arrays arr1 = [25, 56, 12, 85, 34, 75] and arr2 = [42, 3, 86, 32, 856, 46], solve the following:

Create a new NumPy array Narr with the shape equal to arr1 filled with random values.

Permanently change the dtype of arr1 to complex.

Transform arrays arr1 and arr2 into two matrices (arr1_mat and arr2_mat) of shape (2,3) and arrive at the solution of the following equation:


Hints/Answers:
Hint: Use np.random.rand()

Hint: Use astype(). Answer: [ 25.+0.j 56.+0.j 12.+0.j 85.+0.j 34.+0.j 75.+0.j]

Hint: Use a2 - b2 property. Answer: [[ 67.+0.j 59.+0.j 98.+0.j] [ 117.+0.j 890.+0.j 121.+0.j]]


Solution:
import numpy as np
Narr=np.random.rand(6)
print(Narr)

arr1 = [25, 56, 12, 85, 34, 75] 
arr2 = [42, 3, 86, 32, 856, 46]
import numpy as np
arr1_mat=np.array(arr1).reshape(2,3).astype(complex)
arr1_mat
arr2_mat=np.array(arr2).reshape(2,3).astype(complex)
arr2_mat
x=arr1_mat*arr1_mat-arr2_mat*arr2_mat
y=arr1_mat-arr2_mat
x/y



Difference b/w normal python and dumpy
import  sys
# Input
lst = [56, 45, 12, 6] 
# Expected output:
# 16 
sys.getsizeof(lst)

lst = [56, 45, 12, 6]
import numpy as np
arr = np.array(lst)
print(arr.nbytes)
# Output:
# 16 


import numpy as np
arr = np.arange(4)
arr.reshape(2,2)
print(arr.shape)
#(4,)

import numpy as np
arr = np.arange(4).reshape(4,-1)
print(arr.shape)
#(4,1)


ProblemStatement:
Solve the following:

Create a 4 x 4 matrix and add values 4,5,6 above the parent diagonal.

Given a Numpy array arr = np.arange(11), negate all the elements between 6 and 10.

Given a matrix mat and an array arr, for each row of the matrix if elements of Column 1 are equal to the corresponding element of the array, then print the corresponding value of Column 2 of the matrix.

 
import numpy as np
mat = np.array([['abc','A'],['def','B'],['ghi','C'],['jkl','D']])
arr = np.array(['abc','dfe','ghi','kjl']) 
 
4.Given a matrix mat, sort it by the second column.
 
import numpy as np
mat = np.array([[1,21,3],[5,4,2],[56,12,4]])
 

5. Given an array arr, find the top 4 maximum values.
 
import numpy as np
arr = np.array([90, 14, 24, 13, 13, 590, 0, 45, 16, 50])
 
6. Find the nearest number from the given number in an array.
 
arr = np.array([10,55,22,3,6,44,9,54])
nearest_to = 50
 


1. Answer:

[[0 4 0 0]
[0 0 5 0]
[0 0 0 6]
[0 0 0 0]]

2. Answer:

[ 0 1 2 3 4 5 6 -7 -8 -9 10]

3. Answer:

['A' 'C']

4. Answer:

[[ 5 4 2]
[56 12 4]
[ 1 21 3]] Hint: Use argsort().

5. Answer:

[ 45 50 590 90] Hint: Use argpartition().

6. Answer:

54 Hint: Use argmin()


Solutions:
1. np.diag([4,5,6],1)



