import pandas as pd
# 1. Using list of dictionary
lst = [{"C1": 1, "C2": 2},
        {"C1": 5, "C2": 10, "C3": 20}]
# Observe NaN       
print(pd.DataFrame(lst, index = ["R1", "R2"]))
#     C1  C2    C3
# R1   1   2   NaN
# R2   5  10  20.0
# 2. Using dictionary
dc = {"C1": ["1", "3"],
        "C2": ["2","4"]}
print( pd.DataFrame(dc, index = ["R1", "R2"]) )
#    C1 C2
# R1  1  2
# R2  3  4
# 3. Using list
lst = [[52,32],[45,85]]
print(pd.DataFrame(lst, index = list('pq'), columns = list('ab')))
#     a   b
# p  52  32
# q  45  85
  
              
df = pd.DataFrame({'A': [10., 20.],
                    'B': "text",
                    'C': [2,60],
                    'D': 3+9j})
print(df)
#       A     B   C       D
# 0  10.0  text   2  (3+9j)
# 1  20.0  text  60  (3+9j)
print(df.dtypes)
# A       float64
# B        object
# C         int64
# D    complex128
# dtype: object 
              
print(df.info())
# < class 'pandas.core.frame.DataFrame' >
# RangeIndex: 2 entries, 0 to 1
# Data columns (total 4 columns):
# A    2 non-null float64
# B    2 non-null object
# C    2 non-null int64
# D    2 non-null complex128
# dtypes: complex128(1), float64(1), int64(1), object(1)
# memory usage: 160.0+ bytes 
              

print((df.index))   #index of rows
# RangeIndex(start=0, stop=2, step=1)
print(df.columns)   # index of columns
# Index(['A', 'B', 'C', 'D'], dtype='object')
print(df.values)    # display values of df
# [[10.0 'text' 2 (3+9j)]
#  [20.0 'text' 60 (3+9j)]]
              


import pandas as pd
df = pd.DataFrame([[11, 202],
                    [33, 44]],
                    index = list('AB'),
                    columns = list('CD'))
''' Writing to excel file '''
df.to_excel('test_file.xlsx', sheet_name = 'Sheet1')
''' Reading from excel file '''
print(pd.read_excel('test_file.xlsx', 'Sheet1')) 
              


import numpy as np

print(None == None)
print(np.nan == np.NaN)
print(np.nan == np.nan)

import pandas as pd
df = pd.DataFrame({'A' : [1,-4,7],
                   'B' : [-2,5,-8],
                   'C' : [-3,-6,9]},
                   index = list('STU'))
print(df.apply(np.sum, axis = 0).sum())

import pandas as pd
df1 = pd.DataFrame({'A': [1,4,7],
                    'B': [2,5,8],
                    'C': [3,6,9]},
                    index = list ('PQR'))
df2 = pd.DataFrame({'A': [1,-4,-7],
                    'B': [-2,5,-8],
                    'C': [-3,-6,9]},
                    index = list ('STU'))
print(df1,df2,   df1.sub(df2))


import pandas as pd
df = pd.DataFrame([[15,12],
                   [33,54],
                   [10,32]],
                   columns = list('AB'))
print(df.eval('B-A').count().sum())


import pandas as pd
df = pd.DataFrame([[15,12], [33,54], [10,32]],
                   index = list('ABC'),
                   columns = list('DE'))
df
print(df.loc['B', 'D'])



Merging and reshaping:  
--------------------
import pandas as pd
data1 = pd.DataFrame([[15, 12, -3],
                    [33, 54, 21],
                    [10, 32, 22]],
                    columns = list('ABC'))
data2 = pd.DataFrame([[10, 1, 3],
                    [33, -54, 2],
                    [10, 0.32, 2]],
                    columns = list('DEF'))
print(data1)
#     A   B   C
# 0  15  12  -3
# 1  33  54  21
# 2  10  32  22
print(data2)
#     D      E  F
# 0  10   1.00  3
# 1  33 -54.00  2
# 2  10   0.32  2
print(pd.concat( [data1,data2], axis = 1 ))
#     A   B   C   D      E  F
# 0  15  12  -3  10   1.00  3
# 1  33  54  21  33 -54.00  2
# 2  10  32  22  10   0.32  2
Â 

import numpy as np
import pandas as pd
data1 = pd.DataFrame(np.random.randn(9).reshape(3,3),
                   columns = list('ABC'))
data2 = pd.DataFrame(np.arange(9).reshape(3,3),
                   columns = list('ABC'))
print(data1)     # Random values
#           A         B         C
# 0  1.957218  0.433266  1.214950
# 1 -0.143500 -0.092030 -0.823898
# 2  0.481486 -0.024111 -0.769195
print(data2)
#    A  B  C
# 0  0  1  2
# 1  3  4  5
# 2  6  7  8
print(pd.concat( [data1,data2], axis = 0 ))
#           A         B         C
# 0  1.957218  0.433266  1.214950
# 1 -0.143500 -0.092030 -0.823898
# 2  0.481486 -0.024111 -0.769195
# 0  0.000000  1.000000  2.000000
# 1  3.000000  4.000000  5.000000
# 2  6.000000  7.000000  8.000000 

              

Reshaping:
----------
import numpy as np
import pandas as pd
multi_ind = pd.MultiIndex.from_tuples(
                                      [('IND','Game1'),
                                       ('IND','Game2'),
                                       ('US','Game1'),
                                       ('US','Game2')],
                                       names = [
                                                'Country',
                                                'Game'])
df = pd.DataFrame(np.random.randn(4,2),     # some random values
                  index = multi_ind,
                  columns = ['Year1', 'Year2'])
print(df) 
#                   Year1     Year2
# Country Game                     
# IND     Game1 -2.263939 -0.793986
#         Game2 -0.390861  0.728531
# US      Game1 -0.944708  0.352151
#         Game2 -0.232056  0.452532 


''' Increase in length '''
print(df.stack())   
# Country  Game        
# IND      Game1  Year1   -2.263939
#                 Year2   -0.793986
#          Game2  Year1   -0.390861
#                 Year2    0.728531
# US       Game1  Year1   -0.944708
#                 Year2    0.352151
#          Game2  Year1   -0.232056
#                 Year2    0.452532
# dtype: float64
''' Increase in width '''
print(df.unstack()) 
#             Year1               Year2          
# Game        Game1     Game2     Game1     Game2
# Country                                        
# IND     -2.263939 -0.390861 -0.793986  0.728531
# US      -0.944708 -0.232056  0.352151  0.452532 

-----
Pivot tables:
------------
import pandas as pd
df = pd.DataFrame([
            ['IND', 'Gold', 'Game1', '9.9'],
            ['IND', 'Bronze', 'Game2', '8'],
            ['USA', 'Silver', 'Game1', '9.5'],
            ['USA', 'Gold', 'Game2', '8.6'],
            ], columns = ['Country', 'Medal', 
                'Game', 'Score'],
                index = ['Year1', 'Year2','Year1', 'Year2'])
                  
print(df)  
#       Country   Medal   Game Score
# Year1     IND    Gold  Game1   9.9
# Year2     IND  Bronze  Game2     8
# Year1     USA  Silver  Game1   9.5
# Year2     USA    Gold  Game2   8.6 




import numpy as np
import pandas as pd
df = pd.DataFrame([
            ['IND', 'Gold', 'Game1', '9.9'],
            ['IND', 'Silver', 'Game1', '9.5'],
            ['IND', 'Bronze', 'Game2', '8'],
            ['USA', 'Bronze', 'Game1', '9.0'],
            ['USA', 'Silver', 'Game2', '8.6'],
            ], columns = ['Country', 'Medal', 
                'Game', 'Score'],
                index = ['Year1', 'Year1', 'Year2','Year1', 'Year2'])
                  
print(df)
#       Country   Medal   Game Score
# Year1     IND    Gold  Game1   9.9
# Year1     IND  Silver  Game1   9.5
# Year2     IND  Bronze  Game2     8
# Year1     USA  Bronze  Game1   9.0
# Year2     USA  Silver  Game2   8.6
print(df.pivot_table(index = 'Country', 
                     columns = 'Game',
                     values = 'Score',
                     aggfunc = np.max))   
# Game    Game1 Game2
# Country            
# IND       9.9     8
# USA       9.0   8.6 


Grouping:
-------
import pandas as pd
df = pd.DataFrame([["Laptop", 1000],
                   ["Laptop", 2520],
                   ["Desktop", 3000],
                   ["Desktop", 400]], columns = ['Category','Sales'])
print(df)
#   Category  Sales
# 0   Laptop   1000
# 1   Laptop   2520
# 2  Desktop   3000
# 3  Desktop    400
print(df.groupby(['Category'], sort = False).sum())
#           Sales
# Category       
# Laptop     3520
# Desktop    3400



------
df.replace(to_replace=26, value=30) 
# it will replace 26 with 30 in df  or we can give just numbers like ex:
df.replace(26,30)


df.replace('[A-Za-z]',regex=True)
If regex is not there then it will not show any difference in replace

