
Labguide on Lambda and S3 bucket
Objective: In this lab, we shall learn about how to use AWS Lambda function for
copying source S3 bucket contents to the target S3 bucket as soon as the data is
uploaded on the source bucket.
Step 1: First, we must create two S3 buckets one with for the source and another
for the target
Step 2: Choose Lambda option under compute section and under Lambda
functions page, click on create function button and create a lambda function from
scratch by selecting Author from scratch
Step 3: Fill the name of the lambda function and runtime as Python 3.8.
Step4: Create an IAM role for this Lambda function that has S3 Full access
permission.
Choose that role in the existing role option.
Step 5: Click on Create Function button and click on Add Trigger button, since we
want to execute the lambda function for S3 events.
Step 6: Choose a trigger type and its configuration as S3 bucket by choosing the
source bucket name and click on Add button.
Step 7: The following code snippet with the destination S3 bucket in it will copy the
contents to it when an event happens in the source bucket. Deploy the Lambda
Function.
from __future__ import print_function
import boto3
import time, urllib
import json
print ("*"*80)
print ("Initializing..")
print ("*"*80)
s3 = boto3.client('s3')
def lambda_handler(event, context):
# TODO implement
source_bucket = event['Records'][0]['s3']['bucket']['name']
object_key = urllib.unquote_plus(event['Records'][0]['s3']['object']['key'])
target_bucket = 'my-target-bucket'
copy_source = {'Bucket': source_bucket, 'Key': object_key}
print ("Source bucket : ", source_bucket)
print ("Target bucket : ", target_bucket)
print ("Log Stream name: ", context.log_stream_name)
print ("Log Group name: ", context.log_group_name)
print ("Request ID: ", context.aws_request_id)
print ("Mem. limits(MB): ", context.memory_limit_in_mb)
try:
print ("Using waiter to waiting for object to persist through s3 service")
waiter = s3.get_waiter('object_exists')
waiter.wait(Bucket=source_bucket, Key=object_key)
s3.copy_object(Bucket=target_bucket, Key=object_key,
CopySource=copy_source)
return response['ContentType']
except Exception as err:
print ("Error -"+str(err))
return e
Step 8: Once your lambda function creation is done, now go to your AWS S3 buckets
page and click on my-source-bucket name which you have selected on lambda
function Add triggers page.
Upload any file on my-source-bucket and then go to my-target-bucket and check.
In both the buckets, you can see the similar data.
Summary: Use AWS Lambda function for copying source S3 bucket contents to the
target S3 bucket as soon as the data is uploaded on the source bucket.