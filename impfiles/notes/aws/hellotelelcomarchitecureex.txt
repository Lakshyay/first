
3
Demonstration Guide on Implementing Hellotelecom architecture
This is a reference guide documented for Demonstration on AWS Code Commit, we
discussed above.
Create an AWS account at http://aws.amazon.com and get started.
Before proceeding with AWS Code Pipeline, you need to ensure to:
a. Create and connect to the Database
b. Integrate Backend with Database
c. Integrate Front end with Backend
a. Create and connect to the Database
1. Go to AWS RDS dashboard.
2. Click on Create database and select MySQL engine. Click on Next.
3. Select Dev/test or Prod as a use case as per your choice. Click on Next.
4. Configure the database:
 Provide database engine version, e.g. 5.5.46
 Select a DB instance class , e.g. t2.micro
 Assign a name to DB i.e. DB instance identifie, e.g. hellotelecom-db
 Provide master username and password. Click on Next
5. Select the default networking settings. Provide a database name, e.g. hellodb.
Open port 3306. Click on Create database.
6. Once database is created, you can find the details as shown:
7. Ensure the VPC security group of the database allow remote access
“Anywhere from Internet” or Custom IP on port 3306. Else enable as shown:
8. You can connect to the RDS instance using MySQL workbench as shown:
9. Load Mysql database script as follows:
use hellodb;
create table plan(
plan_id integer primary key,
plan_name varchar(50),
local_rate integer,
national_rate integer);
create table customer(
phone_no bigint primary key,
name varchar(50),
age integer,
gender char,
address varchar(50),
plan_id integer references plan(plan_id),
password varchar(50)
);
create table calldetails(
id integer primary key,
called_by bigint,
called_to bigint,
called_on date,
duration integer);
create table friendfamily(
id integer primary key AUTO_INCREMENT,
phone_no bigint references customer(phone_no),
friend_and_family BIGINT
);
insert into plan values(1,'IFY_60',60,60);
insert into plan values(2,'IFY_10',10,20);
insert into plan values(3,'IFY_30',30,60);
insert into customer values(9009009001,'Mark',25,'M','Infy
Chicago',1,'infy@123');
insert into customer values(9009009002,'Steve',56,'M','Infy Texas',2,'7hjUavb*');
insert into customer values(9009009003,'Linda',23,'F','Infy NY',3,'@aPbj8');
insert into calldetails values(1,9009009001,9009009002,'2017-08-12',34);
insert into calldetails values(2,9009009002,9009009003,'2017-08-11',4);
insert into calldetails values(3,9009009003,9009009001,'2017-08-10',14);
insert into calldetails values(4,9009009001,9009009002,'2017-08-13',3);
insert into calldetails values(5,9009009002,9009009003,'2017-08-14',55);
insert into calldetails values(6,9009009003,9009009001,'2017-08-15',126);
insert into calldetails values(7,9009009001,9009009002,'2017-08-16',79);
insert into calldetails values(8,9009009002,9009009003,'2017-08-17',3);
insert into friendfamily values(1,9009009001,9009009002);
insert into friendfamily values(2,9009009001,9009009003);
insert into friendfamily values(3,9009009002,9009009005);
insert into friendfamily values(4,9009009003,9009009001);
insert into friendfamily values(5,9009009001,9009009004);
commit;
10. Ensure remote access on the database using following command
create user 'cicddb'@'localhost' identified by 'cicddb123';
GRANT ALL ON * TO 'cicddb'@'%' IDENTIFIED BY 'cicddb123';
b. Integrate Backend with Database
Go to the Java local repository and update with the database details in the
following file as shown:
hellotelecom-Javarepo/src/main/resources/application.properties
spring.application.name=hellotelecom
server.port=8000
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://hellotelecom-db.c4lyleytufir.us-east-
2.rds.amazonaws.com/hellodb
spring.datasource.username=cicddb
spring.datasource.password=cicddb123
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect
Ensure to commit the latest code using following git commands:
cd hellotelecom-Javarepo
git add *
git commit –“ updated with application.properties” .
git push origin master
c. Integrate Front end with Backend
Go to the UI local repository and edit the Edit the file: information.services.ts and
make the changes of the URLs to the backend URL.
Path is hellotelecom-UIrepo/src/app
import { Injectable } from '@angular/core';
@Injectable()
export class InformationService {
phoneNo: number;
customerBaseUrl = 'http://ec2-18-220-66-88.us-east-
2.compute.amazonaws.com:8000';
loginUrl = 'http://ec2-18-220-66-88.us-east-
2.compute.amazonaws.com:8000/login';
registerUrl = 'http://ec2-18-220-66-88.us-east-
2.compute.amazonaws.com:8000/customers/';
profileUrl = 'http://ec2-18-220-66-88.us-east-
2.compute.amazonaws.com:8000/customers/';
viewPlanUrl = 'http://ec2-18-220-66-88.us-east-
2.compute.amazonaws.com:8000/plans/';
callDetailUrl = `http://ec2-18-220-66-88.us-east-
2.compute.amazonaws.com:8000/customers/`;
addFriendUrl = `http://ec2-18-220-66-88.us-east-
2.compute.amazonaws.com:8000/customers/`;
}
Ensure to commit the latest code using following git commands:
cd hellotelecom-UIrepo
git add *
git commit –“ updated with application.properties” .
git push origin master
